package com.centrocultural.utils;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.centrocultural.models.*;
import java.io.FileOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class PDFGenerator {
    
    private static final Font FONT_TITULO = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
    private static final Font FONT_SUBTITULO = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD);
    private static final Font FONT_ENCABEZADO = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
    private static final Font FONT_NORMAL = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL);
    private static final Font FONT_FOOTER = new Font(Font.FontFamily.HELVETICA, 8, Font.ITALIC);
    
    public static String generarReporteAlumnos(List<Alumno> alumnos) throws Exception {
        String nombreArchivo = "reporte_alumnos_" + 
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")) + ".pdf";
        
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, new FileOutputStream(nombreArchivo));
        document.open();
        
        // Encabezado
        agregarEncabezado(document, "Reporte de Alumnos");
        
        // Tabla de alumnos
        PdfPTable tabla = new PdfPTable(4);
        tabla.setWidthPercentage(100);
        tabla.setSpacingBefore(20);
        float[] columnWidths = {15f, 35f, 20f, 30f};
        tabla.setWidths(columnWidths);
        
        // Encabezados de tabla
        agregarCeldaEncabezado(tabla, "Expediente");
        agregarCeldaEncabezado(tabla, "Nombre Completo");
        agregarCeldaEncabezado(tabla, "Fecha Nacimiento");
        agregarCeldaEncabezado(tabla, "Actividades Inscritas");
        
        // Datos
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        for (Alumno alumno : alumnos) {
            tabla.addCell(new PdfPCell(new Phrase(String.valueOf(alumno.getNoExpediente()), FONT_NORMAL)));
            tabla.addCell(new PdfPCell(new Phrase(alumno.getNombreCompleto(), FONT_NORMAL)));
            tabla.addCell(new PdfPCell(new Phrase(
                alumno.getFechaNacimiento() != null ? 
                alumno.getFechaNacimiento().format(formatter) : "-", 
                FONT_NORMAL
            )));
            tabla.addCell(new PdfPCell(new Phrase(alumno.getActividadesInscritas(), FONT_NORMAL)));
        }
        
        document.add(tabla);
        
        // Resumen
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("Total de alumnos: " + alumnos.size(), FONT_SUBTITULO));
        
        // Pie de página
        agregarPiePagina(document);
        
        document.close();
        return nombreArchivo;
    }
    
    public static String generarReporteInstructores(List<Instructor> instructores) throws Exception {
        String nombreArchivo = "reporte_instructores_" + 
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")) + ".pdf";
        
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, new FileOutputStream(nombreArchivo));
        document.open();
        
        agregarEncabezado(document, "Reporte de Instructores");
        
        PdfPTable tabla = new PdfPTable(4);
        tabla.setWidthPercentage(100);
        tabla.setSpacingBefore(20);
        float[] columnWidths = {15f, 35f, 20f, 30f};
        tabla.setWidths(columnWidths);
        
        agregarCeldaEncabezado(tabla, "Expediente");
        agregarCeldaEncabezado(tabla, "Nombre Completo");
        agregarCeldaEncabezado(tabla, "Edad");
        agregarCeldaEncabezado(tabla, "Actividades Autorizadas");
        
        for (Instructor instructor : instructores) {
            tabla.addCell(new PdfPCell(new Phrase(String.valueOf(instructor.getNoExpediente()), FONT_NORMAL)));
            tabla.addCell(new PdfPCell(new Phrase(instructor.getNombreCompleto(), FONT_NORMAL)));
            tabla.addCell(new PdfPCell(new Phrase(instructor.getEdad() + " años", FONT_NORMAL)));
            
            StringBuilder actividades = new StringBuilder();
            for (int i = 0; i < instructor.getActividadesAutorizadas().size(); i++) {
                actividades.append(instructor.getActividadesAutorizadas().get(i).getNombre());
                if (i < instructor.getActividadesAutorizadas().size() - 1) {
                    actividades.append(", ");
                }
            }
            tabla.addCell(new PdfPCell(new Phrase(actividades.toString(), FONT_NORMAL)));
        }
        
        document.add(tabla);
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("Total de instructores: " + instructores.size(), FONT_SUBTITULO));
        
        agregarPiePagina(document);
        document.close();
        return nombreArchivo;
    }
    
    public static String generarReporteActividades(List<Actividad> actividades) throws Exception {
        String nombreArchivo = "reporte_actividades_" + 
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")) + ".pdf";
        
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, new FileOutputStream(nombreArchivo));
        document.open();
        
        agregarEncabezado(document, "Reporte de Actividades");
        
        PdfPTable tabla = new PdfPTable(5);
        tabla.setWidthPercentage(100);
        tabla.setSpacingBefore(20);
        float[] columnWidths = {10f, 30f, 20f, 25f, 15f};
        tabla.setWidths(columnWidths);
        
        agregarCeldaEncabezado(tabla, "ID");
        agregarCeldaEncabezado(tabla, "Nombre");
        agregarCeldaEncabezado(tabla, "Clasificación");
        agregarCeldaEncabezado(tabla, "Área Asignada");
        agregarCeldaEncabezado(tabla, "Estado");
        
        for (Actividad actividad : actividades) {
            tabla.addCell(new PdfPCell(new Phrase(String.valueOf(actividad.getIdActividad()), FONT_NORMAL)));
            tabla.addCell(new PdfPCell(new Phrase(actividad.getNombre(), FONT_NORMAL)));
            tabla.addCell(new PdfPCell(new Phrase(actividad.getClasificacion(), FONT_NORMAL)));
            tabla.addCell(new PdfPCell(new Phrase(
                actividad.getAreaAsignada() != null ? actividad.getAreaAsignada() : "-", 
                FONT_NORMAL
            )));
            tabla.addCell(new PdfPCell(new Phrase(
                actividad.isActiva() ? "Activa" : "Inactiva", 
                FONT_NORMAL
            )));
        }
        
        document.add(tabla);
        
        // Estadísticas
        int activas = 0;
        int deportivas = 0;
        int culturales = 0;
        int oficios = 0;
        
        for (Actividad actividad : actividades) {
            if (actividad.isActiva()) activas++;
            switch (actividad.getClasificacion().toLowerCase()) {
                case "deportiva": deportivas++; break;
                case "cultural": culturales++; break;
                case "oficio": oficios++; break;
            }
        }
        
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("Resumen:", FONT_SUBTITULO));
        document.add(new Paragraph("Total de actividades: " + actividades.size(), FONT_NORMAL));
        document.add(new Paragraph("Actividades activas: " + activas, FONT_NORMAL));
        document.add(new Paragraph("Deportivas: " + deportivas, FONT_NORMAL));
        document.add(new Paragraph("Culturales: " + culturales, FONT_NORMAL));
        document.add(new Paragraph("Oficios: " + oficios, FONT_NORMAL));
        
        agregarPiePagina(document);
        document.close();
        return nombreArchivo;
    }
    
    public static String generarReporteMateriales(List<Material> materiales) throws Exception {
        String nombreArchivo = "reporte_materiales_" + 
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")) + ".pdf";
        
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, new FileOutputStream(nombreArchivo));
        document.open();
        
        agregarEncabezado(document, "Reporte de Materiales");
        
        PdfPTable tabla = new PdfPTable(5);
        tabla.setWidthPercentage(100);
        tabla.setSpacingBefore(20);
        float[] columnWidths = {10f, 25f, 25f, 15f, 25f};
        tabla.setWidths(columnWidths);
        
        agregarCeldaEncabezado(tabla, "ID");
        agregarCeldaEncabezado(tabla, "Nombre");
        agregarCeldaEncabezado(tabla, "Área Almacenamiento");
        agregarCeldaEncabezado(tabla, "Condición");
        agregarCeldaEncabezado(tabla, "Grupos Asignados");
        
        for (Material material : materiales) {
            tabla.addCell(new PdfPCell(new Phrase(String.valueOf(material.getIdMaterial()), FONT_NORMAL)));
            tabla.addCell(new PdfPCell(new Phrase(material.getNombre(), FONT_NORMAL)));
            tabla.addCell(new PdfPCell(new Phrase(material.getAreaAlmacenamiento(), FONT_NORMAL)));
            tabla.addCell(new PdfPCell(new Phrase(material.getCondicion(), FONT_NORMAL)));
            tabla.addCell(new PdfPCell(new Phrase(material.getGruposAsignadosString(), FONT_NORMAL)));
        }
        
        document.add(tabla);
        
        // Estadísticas
        int disponibles = 0;
        int buenEstado = 0;
        int regularEstado = 0;
        int malEstado = 0;
        
        for (Material material : materiales) {
            if (material.isDisponible()) disponibles++;
            switch (material.getCondicion().toLowerCase()) {
                case "bueno": buenEstado++; break;
                case "regular": regularEstado++; break;
                case "malo": malEstado++; break;
            }
        }
        
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("Resumen:", FONT_SUBTITULO));
        document.add(new Paragraph("Total de materiales: " + materiales.size(), FONT_NORMAL));
        document.add(new Paragraph("Materiales disponibles: " + disponibles, FONT_NORMAL));
        document.add(new Paragraph("En buen estado: " + buenEstado, FONT_NORMAL));
        document.add(new Paragraph("En estado regular: " + regularEstado, FONT_NORMAL));
        document.add(new Paragraph("En mal estado: " + malEstado, FONT_NORMAL));
        
        agregarPiePagina(document);
        document.close();
        return nombreArchivo;
    }
    
    private static void agregarEncabezado(Document document, String titulo) throws DocumentException {
        Paragraph header = new Paragraph();
        header.add(new Paragraph("CENTRO CULTURAL", FONT_TITULO));
        header.add(new Paragraph(titulo, FONT_SUBTITULO));
        header.add(new Paragraph(
            "Fecha: " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")), 
            FONT_NORMAL
        ));
        header.add(new Paragraph("\n"));
        header.setAlignment(Element.ALIGN_CENTER);
        document.add(header);
    }
    
    private static void agregarCeldaEncabezado(PdfPTable tabla, String texto) {
        PdfPCell celda = new PdfPCell(new Phrase(texto, FONT_ENCABEZADO));
        celda.setBackgroundColor(BaseColor.LIGHT_GRAY);
        celda.setHorizontalAlignment(Element.ALIGN_CENTER);
        celda.setPadding(8);
        tabla.addCell(celda);
    }
    
    private static void agregarPiePagina(Document document) throws DocumentException {
        document.add(new Paragraph("\n\n"));
        Paragraph footer = new Paragraph(
            "Documento generado automáticamente por el Sistema de Gestión del Centro Cultural", 
            FONT_FOOTER
        );
        footer.setAlignment(Element.ALIGN_CENTER);
        document.add(footer);
    }
}